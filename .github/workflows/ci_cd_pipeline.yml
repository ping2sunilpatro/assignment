name: myapp Project
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from repository
      - name: Get code
        uses: actions/checkout@v4
      # Step 2: Print the Github Actor
      - name: Print GitHub Actor
        run: echo "The actor is ${{ github.actor }}"
      # Step 3: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'
      # Step 4: Run Code Linter (e.g., Checkstyle or SpotBugs)
      - name: Run Code Linter (Checkstyle)
        run: mvn checkstyle:check --file myapp/pom.xml

      # Step 5: Run Tests
      - name: Run Tests
        run: mvn test --file myapp/pom.xml

      # Step 6: Build the project
      - name: Compile with Maven
        run: mvn clean install --file myapp/pom.xml -DskipTests

      # Step 7: Package it (skip tests if already done)
      - name: Build Application
        run: mvn clean package -DskipTests --file myapp/pom.xml

      # Step 8: Build Docker Image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Step 9: Build the Docker image
      - name: Build Docker image
        run: docker build -file myapp/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/my-springboot-curd-app:latest myapp/

      # Step 10: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-springboot-curd-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures the 'build' job must run before this

    steps:
      # Step 1: Checkout code again in deploy job (if needed)
      - name: Checkout code
        uses: actions/checkout@v4
      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'
      # Step 3: Set up Docker and Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      # Step 4: Docker Compose up (use custom path for docker-compose.yml if required)
      - name: Deploy using Docker Compose
        run: |
          # Ensure the Docker image is pulled (or built again)
          docker-compose -file myapp/docker/mysqlContainer/docker-compose.yml pull  # Specify custom path for the docker-compose.yml file
          
          # Start the services defined in your docker-compose.yml
          docker-compose -file myapp/docker/mysqlContainer/docker-compose.yml up -d  # Run in detached mode (background)
      # Step 5: Build Spring Boot app with Maven (you can also use Gradle if preferred)
      - name: Build Spring Boot app with Maven
        run: mvn clean install -DskipTests --file myapp/pom.xml
      # Step 6: Run Spring Boot app using java -jar
      - name: Run Spring Boot app
        run: |
          # Change to the directory where the JAR is located, typically `target/` for Maven
          # Run Spring Boot app in the background using nohup
          nohup java -jar target/myapp-1.0.jar &
      # Step 7: Optional: Wait for services to stabilize before proceeding (useful for complex apps)
      - name: Wait for Spring Boot app to start
        run: |
          sleep 30  # Wait for 30 seconds to ensure services are up (adjust as needed)
      # Step 8: Verify deployment (optional)
      - name: Verify Spring Boot app is running
        run: |
          curl -u "${{ secrets.APP_USERNAME }}:${{ secrets.APP_PASSWORD }}" -f http://localhost:8080/actuator/health || exit 1  # Check if the app is healthy